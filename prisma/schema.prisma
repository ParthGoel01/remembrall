// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  clerkId        String @unique
  name           String
  profilePicture String

  memories  Memory[]  @relation("UserMemories")
  comments  Comment[]
  followers Follows[] @relation("Following")
  following Follows[] @relation("Followers")
  likes     Like[]
  @@map("user")
}

model Memory {
  id          String       @id @default(uuid())
  authorId    String
  visibility  Visibility
  heading     String
  description String?
  media       Media[]
  comments    Comment[]
  likes       Like[]
  memoryTags  MemoryTags[]

  author    User     @relation("UserMemories", fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("memory")
}

model Media {
  id        String   @id @default(uuid())
  url       String
  type      String
  memoryId  String
  memory    Memory   @relation(fields: [memoryId], references: [id])
  @@map("media")
}

model Comment {
  id         String   @id @default(uuid())
  memoryId   String
  authorId   String
  content    String
  timestamps DateTime @default(now())
  parentId   String?

  memory  Memory    @relation(fields: [memoryId], references: [id])
  author  User      @relation(fields: [authorId], references: [id])
  replies Comment[] @relation("CommentReplies")

  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  @@map("comment")
}

model Like {
  id       String @id @default(uuid())
  memoryId String
  userId   String

  memory Memory @relation(fields: [memoryId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([memoryId, userId])
  @@map("like")
}

model Tag {
  id      String @id @default(uuid())
  tagName String @unique

  memories MemoryTags[]
  @@map("tag")
}

model MemoryTags {
  memoryId String
  tagId    String

  memory Memory @relation(fields: [memoryId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([memoryId, tagId])
  @@map("memorytags")
}

model Follows {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation("Followers", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

enum Visibility {
  Private
  Followers
  Public
}
